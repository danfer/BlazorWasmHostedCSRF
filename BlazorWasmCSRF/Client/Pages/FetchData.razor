@page "/fetchdata"
@using BlazorWasmCSRF.Shared
@inject HttpClient Http
@inject IJSRuntime JSRuntime

<PageTitle>Weather forecast</PageTitle>

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from the server.</p>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>

    <button class="btn btn-primary" @onclick="HandleSubmit">Add</button>

    <EditForm Model="@forecast" OnSubmit=@HandleSubmit>
        <div class="form-group">
            <label for="Date">Date</label>
            <InputDate @bind-Value=forecast.Date class="form-control" id="Date" />
        </div>
        <div class="form-group">
            <label for="TemperatureC">TemperatureC</label>
            <InputNumber @bind-Value=forecast.TemperatureC class="form-control" id="TemperatureC" />
        </div>
        <div class="form-group">
            <label for="Summary">Summary</label>
            <InputText @bind-Value=forecast.Summary class="form-control" id="Summary" />
        </div>
        <input type="submit" class="btn btn-primary" value="Save" />
    </EditForm>
}

@code {
    private WeatherForecast[]? forecasts;
    private WeatherForecast? forecast = new WeatherForecast { Date = DateOnly.FromDateTime(DateTime.Now), Summary = "abc", TemperatureC = 25 };

    protected override async Task OnInitializedAsync()
    {
        forecasts = await Http.GetFromJsonAsync<WeatherForecast[]>("WeatherForecast");
    }

    private async Task HandleSubmit()
    {
        var token = await JSRuntime.InvokeAsync<string>("getCookie", "CSRF-TOKEN");

        // Add the token to the HttpClient headers
        Http.DefaultRequestHeaders.Remove("X-CSRF-TOKEN");
        Http.DefaultRequestHeaders.Add("X-CSRF-TOKEN", token);

        var response = await Http.PostAsJsonAsync("WeatherForecast", forecast);

        response.EnsureSuccessStatusCode();
        forecast = await response.Content.ReadFromJsonAsync<WeatherForecast>();
    }
}
